import sys
import os

# Add the parent directory to the Python path
sys.path.append(os.path.abspath('..'))

from haystack_ import ChatMessage, ToolCall, ToolInvoker, Tool

# Tool definition
def dummy_weather_function(city: str):
    return f"The weather in {city} is 20 degrees."
parameters = {"type": "object",
            "properties": {"city": {"type": "string"}},
            "required": ["city"]}
tool = Tool(name="weather_tool",
            description="A tool to get the weather",
            function=dummy_weather_function,
            parameters=parameters)

# Usually, the ChatMessage with tool_calls is generated by a Language Model
# Here, we create it manually for demonstration purposes
tool_call = ToolCall(
    tool_name="weather_tool",
    arguments={"city": "Berlin"}
)
message = ChatMessage.from_assistant(tool_calls=[tool_call])

# ToolInvoker initialization and run
invoker = ToolInvoker(tools=[tool])
result = invoker.run(messages=[message])

print(result)

expected = """
{'tool_messages':
    [
        ChatMessage(_role=<ChatRole.TOOL: 'tool'>,
            _content=[
                ToolCallResult(result='The weather in Berlin is 20 degrees.',
                    origin=ToolCall(tool_name='weather_tool',
                        arguments={'city': 'Berlin'}, id=None), error=False)
                ],
            _name=None,
            _meta={}
        )
    ],
    'state': <haystack.components.agents.state.state.State object at 0x1073ec980>
}
"""
